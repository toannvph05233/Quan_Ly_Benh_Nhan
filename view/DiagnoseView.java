package qlsv_swing.qlsv.view;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.List;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.SpringLayout;import javax.swing.WindowConstants;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.DefaultTableModel;import qlsv_swing.qlsv.entity.CustomerID;import qlsv_swing.qlsv.entity.Diagnose;import qlsv_swing.qlsv.entity.Prescription;import qlsv_swing.qlsv.func.CustomerFunc;public class DiagnoseView extends JFrame implements ActionListener, ListSelectionListener {    private static final long serialVersionUID = 1L;    private JButton addDiagnoseBtn;    private JButton editDiagnoseBtn;    private JButton deleteDiagnoseBtn;    private JButton clearDiagnoseBtn;    private JButton showAllBtn;    private JButton addPrescriptionBtn;    private JButton editPrescriptionBtn;    private JButton deletePrescriptionBtn;    private JButton backBtn;    private JButton clearPrescriptionBtn;    private JScrollPane jScrollPaneDiagnoseTable;    private JScrollPane jScrollPanePrescriptionTable;    private JTable DiagnoseTable;    private JTable PrescriptionTable;    private JLabel idLabel;    private JLabel diagnoseLabel;    private JTextField idDiagnoseField;    private JTextField diagnoseField;    private JLabel idPrescriptionLabel;    private JLabel namePrescriptionLabel;    private JLabel quantityPrescriptionLabel;    private JLabel contentPrescriptionLabel;    private JLabel titleDiagnoseLabel;    private JLabel titlePrescriptionLabel;    private JTextField idPrescriptionField;    private JTextField namePrescriptionField;    private JTextField quantityPrescriptionField;    private JTextField contentPrescriptionField;    private String[] columnDiagnose = new String[]{            "ID", "Chuẩn Đoán Bệnh", "Ngày"};    private String[] columnPrescription = new String[]{            "ID", "Tên Thuốc", "Số Lượng", "Cách Dùng"};    private Object data = new Object[][]{};    private Object data2 = new Object[][]{};    public DiagnoseView() {        initComponents();    }    private void initComponents() {        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        // khởi tạo các phím chức năng        addDiagnoseBtn = new JButton("Add");        editDiagnoseBtn = new JButton("Edit");        deleteDiagnoseBtn = new JButton("Delete");        clearDiagnoseBtn = new JButton("Clear");        backBtn = new JButton("Back");        showAllBtn = new JButton("Show All Diagnose");        addPrescriptionBtn = new JButton("Add Prescription");        editPrescriptionBtn = new JButton("Edit Prescription");        deletePrescriptionBtn = new JButton("Delete Prescription");        clearPrescriptionBtn = new JButton("Clear Prescription");        jScrollPaneDiagnoseTable = new JScrollPane();        jScrollPanePrescriptionTable = new JScrollPane();        DiagnoseTable = new JTable();        PrescriptionTable = new JTable();        // khởi tạo các label        idLabel = new JLabel("Id");        diagnoseLabel = new JLabel("Diagnose");        idPrescriptionLabel = new JLabel("Id");        namePrescriptionLabel = new JLabel("Name");        quantityPrescriptionLabel = new JLabel("Quantity");        contentPrescriptionLabel = new JLabel("Content");        titleDiagnoseLabel = new JLabel("Danh Sách Bệnh Của ");        titlePrescriptionLabel = new JLabel("Danh Sách Thuốc Của Bệnh Nhân");        Font font = new Font("Arial", Font.BOLD, 24);        titleDiagnoseLabel.setFont(font);        titlePrescriptionLabel.setFont(font);        idDiagnoseField = new JTextField(15);        idDiagnoseField.setEditable(false);        diagnoseField = new JTextField(15);        idPrescriptionField = new JTextField(15);        idPrescriptionField.setEditable(false);        namePrescriptionField = new JTextField(15);        quantityPrescriptionField = new JTextField(15);        contentPrescriptionField = new JTextField(15);        // cài đặt các cột và data cho bảng Diagnose        DiagnoseTable.setModel(new DefaultTableModel((Object[][]) data, columnDiagnose));        PrescriptionTable.setModel(new DefaultTableModel((Object[][]) data2, columnPrescription));        jScrollPaneDiagnoseTable.setViewportView(DiagnoseTable);        jScrollPanePrescriptionTable.setViewportView(PrescriptionTable);        jScrollPaneDiagnoseTable.setPreferredSize(new Dimension(550, 200));        jScrollPanePrescriptionTable.setPreferredSize(new Dimension(550, 200));        // tạo spring layout        SpringLayout layout = new SpringLayout();        // tạo đối tượng panel để chứa các thành phần của màn hình quản lý Diagnose        JPanel panel = new JPanel();        panel.setSize(1100, 1000);        panel.setLayout(layout);        panel.add(jScrollPaneDiagnoseTable);        panel.add(jScrollPanePrescriptionTable);        panel.add(addDiagnoseBtn);        panel.add(editDiagnoseBtn);        panel.add(deleteDiagnoseBtn);        panel.add(clearDiagnoseBtn);        panel.add(showAllBtn);        panel.add(addPrescriptionBtn);        panel.add(editPrescriptionBtn);        panel.add(deletePrescriptionBtn);        panel.add(clearPrescriptionBtn);        panel.add(backBtn);        panel.add(titlePrescriptionLabel);        panel.add(idLabel);        panel.add(diagnoseLabel);        panel.add(namePrescriptionLabel);        panel.add(idPrescriptionLabel);        panel.add(namePrescriptionLabel);        panel.add(quantityPrescriptionLabel);        panel.add(contentPrescriptionLabel);        panel.add(titleDiagnoseLabel);        panel.add(idDiagnoseField);        panel.add(diagnoseField);        panel.add(namePrescriptionField);        panel.add(idPrescriptionField);        panel.add(namePrescriptionField);        panel.add(quantityPrescriptionField);        panel.add(contentPrescriptionField);        // cài đặt vị trí các thành phần trên màn hình login        layout.putConstraint(SpringLayout.WEST, idLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idLabel, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, diagnoseLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, diagnoseLabel, 90, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, namePrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, namePrescriptionLabel, 50, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idPrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idPrescriptionLabel, 350, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, namePrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, namePrescriptionLabel, 380, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, quantityPrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, quantityPrescriptionLabel, 410, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, contentPrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, contentPrescriptionLabel, 440, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, titlePrescriptionLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, titlePrescriptionLabel, 300, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, titleDiagnoseLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, titleDiagnoseLabel, 10, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, backBtn, 790, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, backBtn, 25, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idDiagnoseField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idDiagnoseField, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, diagnoseField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, diagnoseField, 90, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, namePrescriptionField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, namePrescriptionField, 50, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idPrescriptionField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idPrescriptionField, 350, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, namePrescriptionField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, namePrescriptionField, 380, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, quantityPrescriptionField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, quantityPrescriptionField, 410, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, contentPrescriptionField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, contentPrescriptionField, 440, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, jScrollPaneDiagnoseTable, 300, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, jScrollPaneDiagnoseTable, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, jScrollPanePrescriptionTable, 350, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, jScrollPanePrescriptionTable, 345, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, addDiagnoseBtn, 50, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, addDiagnoseBtn, 150, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, editDiagnoseBtn, 110, SpringLayout.WEST, addDiagnoseBtn);        layout.putConstraint(SpringLayout.NORTH, editDiagnoseBtn, 150, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, deleteDiagnoseBtn, 50, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, deleteDiagnoseBtn, 180, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.NORTH, clearDiagnoseBtn, 180, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, clearDiagnoseBtn, 110, SpringLayout.WEST, deleteDiagnoseBtn);        layout.putConstraint(SpringLayout.WEST, addPrescriptionBtn, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, addPrescriptionBtn, 500, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, editPrescriptionBtn, 120, SpringLayout.WEST, addDiagnoseBtn);        layout.putConstraint(SpringLayout.NORTH, editPrescriptionBtn, 500, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, deletePrescriptionBtn, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, deletePrescriptionBtn, 530, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.NORTH, clearPrescriptionBtn, 530, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, clearPrescriptionBtn, 120, SpringLayout.WEST, deleteDiagnoseBtn);        layout.putConstraint(SpringLayout.NORTH, showAllBtn, 220, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, showAllBtn, 50, SpringLayout.WEST, panel);        this.add(panel);        this.pack();        this.setTitle("Diagnose Information");        this.setSize(950, 630);        // disable Edit and Delete buttons        editDiagnoseBtn.setEnabled(false);        deleteDiagnoseBtn.setEnabled(false);        addDiagnoseBtn.setEnabled(true);        editDiagnoseBtn.setEnabled(false);        deleteDiagnoseBtn.setEnabled(false);        addDiagnoseBtn.setEnabled(true);        setLocationRelativeTo(null);    }    public void showNameCustomer() {        titleDiagnoseLabel.setText("Danh Sách Bệnh Của " + CustomerID.name);    }    public void showMessage(String message) {        JOptionPane.showMessageDialog(this, message);    }    /**     * hiển thị list Diagnose vào bảng DiagnoseTable     *     * @param list     */    public void showListDiagnoses(List<Diagnose> list) {        showNameCustomer();        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");        int size = list.size();        Object[][] Diagnoses = new Object[size][5];        for (int i = 0; i < size; i++) {            Diagnoses[i][0] = list.get(i).getId();            Diagnoses[i][1] = list.get(i).getDiagnose();            Diagnoses[i][2] = formatter.format(list.get(i).getDate());        }        DiagnoseTable.setModel(new DefaultTableModel(Diagnoses, columnDiagnose));    }    public void clearDiagnoseInfo() {        idDiagnoseField.setText("");        diagnoseField.setText("");        // disable Edit and Delete buttons        editDiagnoseBtn.setEnabled(false);        deleteDiagnoseBtn.setEnabled(false);        // enable Add button        addDiagnoseBtn.setEnabled(true);    }    public void clearPrescriptionInfo() {        idPrescriptionField.setText("");        namePrescriptionField.setText("");        quantityPrescriptionField.setText("");        contentPrescriptionField.setText("");        // disable Edit and Delete buttons        editPrescriptionBtn.setEnabled(false);        deletePrescriptionBtn.setEnabled(false);        // enable Add button        addPrescriptionBtn.setEnabled(true);    }    public Diagnose getDiagnoseInfo() {        String diagnose = diagnoseField.getText();        if (diagnose != "") {            try {                int id = Integer.parseInt(idDiagnoseField.getText());                return new Diagnose(id, diagnose);            } catch (Exception e) {                return new Diagnose(0, diagnose);            }        }        return null;    }    public Prescription getPrescriptionInfo() {        String name = namePrescriptionField.getText();        String content = contentPrescriptionField.getText();        int quantity = Integer.parseInt(quantityPrescriptionField.getText());        if (name != "" || content != "") {            try {                int id = Integer.parseInt(idPrescriptionField.getText());                return new Prescription(id, name,quantity,content);            } catch (Exception e) {                return new Prescription(0, name,quantity,content);            }        }        return null;    }    public void fillDiagnoseFromSelectedRow() {        CustomerFunc DiagnoseFunc = new CustomerFunc();        // lấy chỉ số của hàng được chọn        int row = DiagnoseTable.getSelectedRow();        if (row >= 0) {            idDiagnoseField.setText(DiagnoseTable.getModel().getValueAt(row, 0).toString());            diagnoseField.setText(DiagnoseTable.getModel().getValueAt(row, 1).toString());            editDiagnoseBtn.setEnabled(true);            deleteDiagnoseBtn.setEnabled(true);            addDiagnoseBtn.setEnabled(false);            int idDiagnose = Integer.parseInt(DiagnoseTable.getModel().getValueAt(row, 0).toString());            List<Prescription> prescriptions = DiagnoseFunc.getPresByIdCustomer(CustomerID.idCustomer, idDiagnose);            showListPres(prescriptions);            clearPrescriptionInfo();        }    }    public void fillPrescriptionFromSelectedRow() {        int row = PrescriptionTable.getSelectedRow();        if (row >= 0) {            idPrescriptionField.setText(PrescriptionTable.getModel().getValueAt(row, 0).toString());            namePrescriptionField.setText(PrescriptionTable.getModel().getValueAt(row, 1).toString());            quantityPrescriptionField.setText(PrescriptionTable.getModel().getValueAt(row, 2).toString());            contentPrescriptionField.setText(PrescriptionTable.getModel().getValueAt(row, 3).toString());            editPrescriptionBtn.setEnabled(true);            deletePrescriptionBtn.setEnabled(true);            addPrescriptionBtn.setEnabled(false);        }    }    public void showListPres(List<Prescription> list) {        int size = list.size();        Object[][] prescription = new Object[size][4];        for (int i = 0; i < size; i++) {            prescription[i][0] = list.get(i).getId();            prescription[i][1] = list.get(i).getName();            prescription[i][2] = list.get(i).getQuantity();            prescription[i][3] = list.get(i).getContent();        }        PrescriptionTable.setModel(new DefaultTableModel(prescription, columnPrescription));    }    public void actionPerformed(ActionEvent e) {    }    public void valueChanged(ListSelectionEvent e) {    }    public void addAddDiagnoseListener(ActionListener listener) {        addDiagnoseBtn.addActionListener(listener);    }    public void addEditDiagnoseListener(ActionListener listener) {        editDiagnoseBtn.addActionListener(listener);    }    public void addDeleteDiagnoseListener(ActionListener listener) {        deleteDiagnoseBtn.addActionListener(listener);    }    public void addClearDiagnoseListener(ActionListener listener) {        clearDiagnoseBtn.addActionListener(listener);    }    public void backDiagnoseListener(ActionListener listener) {        backBtn.addActionListener(listener);        clearPrescriptionInfo();    }    public void showAllDiagnoseListener(ActionListener listener) {        showAllBtn.addActionListener(listener);    }    public void clearPrescriptionListener(ActionListener listener) {        clearPrescriptionBtn.addActionListener(listener);    }    public void addPrescriptionListener(ActionListener listener) {        addPrescriptionBtn.addActionListener(listener);    }    public void editPrescriptionListener(ActionListener listener) {        editPrescriptionBtn.addActionListener(listener);    }    public void deletePrescriptionListener(ActionListener listener) {        deletePrescriptionBtn.addActionListener(listener);    }    public void addListDiagnoseSelectionListener(ListSelectionListener listener) {        DiagnoseTable.getSelectionModel().addListSelectionListener(listener);    }    public void addListPrescriptionSelectionListener(ListSelectionListener listener) {        PrescriptionTable.getSelectionModel().addListSelectionListener(listener);    }}